@model PaginatedList<LibraryProject.Models.Book>
@{
    ViewData["Title"] = "Index";
    var userRoleId = (int)ViewData["UserRoleId"];
    var titleSortParam = ViewData["TitleSortParam"] as string;
    var authorSortParam = ViewData["AuthorSortParam"] as string;
    var categorySortParam = ViewData["CategorySortParam"] as string;
}

<h1>Books</h1>


<form method="get" asp-controller="Books" asp-action="Index" style="margin-bottom: 15px;">
    <div class="form-group">
        <label for="filterField">Select filter field:</label>
        <select id="filterField" name="filterField" class="form-control">

            <option value="Title">Title</option>
            <option value="Author">Author</option>
            <option value="Category">Category</option>
        </select>
    </div>

    <div class="form-group" id="TitleGroup" style="margin-bottom: 15px;">
        <label for="Title">Enter Title:</label>
        <input type="text" id="TitleInput" name="searchString" class="form-control" placeholder="Enter Title" />
    </div>

    <div class="form-group" id="AuthorCriteriaGroup" style="margin-bottom: 15px;">
        <label for="Author">Enter Author:</label>
        <input type="text" id="AuthorInput" name="searchAuthor" class="form-control" placeholder="Enter Author" />
    </div>

    <div class="form-group" id="CategoryCriteriaGroup" style="margin-bottom: 15px;">
        <label for="CategoryCriteria">Select Category:</label>
        <select id="CategoryCriteria" name="searchCategory" class="form-control">
            <option value="">Select a Category</option>
            @if (ViewBag.Categories != null)
            {
                foreach (var category in ViewBag.Categories)
                {
                    <option value="@category.CategoryName">@category.CategoryName</option>
                }
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary" id="filterButton" style="display:none;">Filter</button>
</form>

<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Book Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- The content will be loaded via AJAX -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



@if (userRoleId == 2)

{
    <p>
        <a class="btn btn-primary mb-3" asp-action="Create">Create New</a>
    </p>

    <table class="table">
        <thead>
            <tr>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@titleSortParam">
                        @Html.DisplayNameFor(model => model.FirstOrDefault().Title)
                    </a>
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@authorSortParam">
                        @Html.DisplayNameFor(model => model.FirstOrDefault().Author)
                    </a>
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@categorySortParam">
                        @Html.DisplayNameFor(model => model.FirstOrDefault().Category.CategoryName)
                    </a>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Quantity)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)

            {
                <tr>
                    <td>@item.Title</td>
                    <td>@item.Author</td>
                    <td>@item.Category?.CategoryName</td>
                    <td>@item.Quantity</td>
                    <td>
                        <a class="btn btn-warning btn-sm" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a class="btn btn-danger btn-sm" asp-action="Delete" asp-route-id="@item.Id">Delete</a> |
                        <a class="btn btn-info btn-sm" asp-action="Details" asp-route-id="@item.Id">Details</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination controls -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @if (Model.HasPreviousPage)

            {
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="1">First</a>
                </li>
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)">Previous</a>
                </li>
            }

            else

            {
                <li class="page-item disabled"><span class="page-link">First</span></li>
                <li class="page-item disabled"><span class="page-link">Previous</span></li>
            }

            @for (int i = 1; i <= Model.TotalPage; i++)

            {
                <li class="page-item @(Model.PageIndex == i ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i">@i</a>
                </li>
            }

            @if (Model.HasNextPage)

            {
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)">Next</a>
                </li>
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.TotalPage)">Last</a>
                </li>
            }

            else

            {
                <li class="page-item disabled"><span class="page-link">Next</span></li>
                <li class="page-item disabled"><span class="page-link">Last</span></li>
            }
        </ul>
    </nav>
}

else
{
    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-md-3">
                <div class="card mb-4 shadow-sm">
                    <a asp-controller="Orders" asp-action="BookDetails" asp-route-id="@item.Id">
                        <img class="card-img-top" src="@item.PictureUrl" alt="@item.Title" style="height: 300px; object-fit: cover;">
                    </a>
                    <div class="card-body text-center">
                        <h5 class="card-title">@item.Title</h5>
                        <h7 class="card-title" style="color: gray;">Remaining stock: @item.Quantity</h7>
                    </div>
                </div>
            </div>
        }
    </div>
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @if (Model.HasPreviousPage)

            {
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="1">First</a>
                </li>
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)">Previous</a>
                </li>
            }

            else

            {
                <li class="page-item disabled"><span class="page-link">First</span></li>
                <li class="page-item disabled"><span class="page-link">Previous</span></li>
            }

            @for (int i = 1; i <= Model.TotalPage; i++)

            {
                <li class="page-item @(Model.PageIndex == i ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i">@i</a>
                </li>
            }

            @if (Model.HasNextPage)

            {
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)">Next</a>
                </li>
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.TotalPage)">Last</a>
                </li>
            }

            else

            {
                <li class="page-item disabled"><span class="page-link">Next</span></li>
                <li class="page-item disabled"><span class="page-link">Last</span></li>
            }
        </ul>
    </nav>
    <style>
        .card-img-top {
            transition: transform 0.2s ease-in-out;
        }

        .card-img-top:hover {
            transform: scale(1.1);
        }
    </style>
}

<a class="btn btn-outline-secondary" asp-controller="Books" asp-action="Index" >Return to list</a>

@section Scripts {
<script>
    document.getElementById('filterField').addEventListener('change', function () {
        var TitleGroup = document.getElementById('TitleGroup');
        var AuthorCriteriaGroup = document.getElementById('AuthorCriteriaGroup');
        var CategoryCriteriaGroup = document.getElementById('CategoryCriteriaGroup');
        var filterButton = document.getElementById('filterButton');

        // Hide all input groups and buttons initially
        TitleGroup.style.display = 'none';
        AuthorCriteriaGroup.style.display = 'none';
        CategoryCriteriaGroup.style.display = 'none';
        filterButton.style.display = 'none';

        // Show the appropriate input group and buttons based on selection
        switch (this.value) {
            case 'Title':
                TitleGroup.style.display = 'block';
                filterButton.style.display = 'block';
                resetButton.style.display = 'block';
                break;
            case 'Author':
                AuthorCriteriaGroup.style.display = 'block';
                filterButton.style.display = 'block';
                resetButton.style.display = 'block';
                break;
            case 'Category':
                CategoryCriteriaGroup.style.display = 'block';
                filterButton.style.display = 'block';
                resetButton.style.display = 'block';
                break;
        }
    });

    // Trigger the change event to initialize the form based on the current selection
    document.getElementById('filterField').dispatchEvent(new Event('change'));

</script>

<script>
    $(document).ready(function () {
        $('#detailsModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var url = button.data('url');
            var modal = $(this);

            // Load the content into the modal body
            modal.find('.modal-body').load(url, function (response, status, xhr) {
                if (status == "error") {
                    modal.find('.modal-body').html("<p>Error loading details. Please try again.</p>");
                }
            });
        });
    });
</script>
}

